@page "/achievements/all"
@page "/achievements/{AchievementName}"
@inject ISettingsService SettingsService
@inject IDataService DataService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<PageTitle>All Achievements</PageTitle>

@if (_loading)
{
    <Loading></Loading>
}
else
{
    <MudGrid>
    @if (selectedAchievement != null)
    {
       
        <MudItem xs="12">
            <AchievementBox Model="@selectedAchievement" Fishes="@(DataService.AllFishes.Where(fish => fish.AchievementIds.Contains(selectedAchievement.Id)).ToList())" ShowCaughtInformation="isApiKeySet" ShowFilter="true"></AchievementBox>
        </MudItem>
        
    }
    else
    {
        @foreach(var achievement in DataService.AllAchievements)
        {
            <MudItem xs="12">
                <AchievementBox Model="@achievement" Fishes="@(DataService.AllFishes.Where(fish => fish.AchievementIds.Contains(achievement.Id)).Select(fish => fish with {}).ToList())" ShowCaughtInformation="isApiKeySet"></AchievementBox>
            </MudItem>
        }
    }
    </MudGrid>
}

@code {
    private string _achievementName;
    [Parameter]
    public string AchievementName { get; set; }

    private bool _loading = true;

    private Models.Achievement? selectedAchievement;
    private bool isApiKeySet;

    private Timer? promptApiKeyTimer;

    private async Task UpdateContent()
    {
        isApiKeySet = !string.IsNullOrEmpty(SettingsService.Gw2ApiKey);
        if (_achievementName != "")
        {
            selectedAchievement = DataService.AllAchievements.First(ach => ach.Name == _achievementName);
        }
        else
        {
            selectedAchievement = null;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await DataService.LoadAllData();
        DataService.ApiDataUpdated += ApiDataUpdated;

        if (SettingsService.Gw2ApiKey == "")
        {
            SendPromptForApiKey();
        }

        _loading = false;
    }

    private async Task SendPromptForApiKey()
    {
        if (Snackbar.ShownSnackbars.Count() > 0)
        {
            return;
        }
        
        await Task.Delay(5000);
        
        if (Snackbar.ShownSnackbars.Count() > 0)
        {
            return;
        }

        Snackbar.Add("You can add an API key in settings to track your progress", Severity.Info, config =>
        {
            config.Onclick = snackbar =>
            {
                NavManager.NavigateTo("/settings");
                return Task.CompletedTask;
            };
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        _achievementName = AchievementName ?? "";
        AchievementName = null;
        await UpdateContent();
        await base.OnParametersSetAsync();
    }

    private void ApiDataUpdated(object sender, EventArgs e) => UpdateContent();

}
