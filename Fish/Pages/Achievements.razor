@page "/achievements/all"
@page "/achievements/{AchievementName}"
@inject ISettingsService SettingsService
@inject IDataService DataService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<PageTitle>All Achievements</PageTitle>

@if (_loading)
{
    <Loading></Loading>
}
else
{
    <MudGrid>
    @if (selectedAchievement != null)
    {
       
        <MudItem xs="12">
            <AchievementBox Model="@selectedAchievement" Fishes="@(DataService.AllFishes.Where(fish => fish.AchievementIds.Contains(selectedAchievement.Id)).ToList())" ShowCaughtInformation="isApiKeySet" ShowFilter="true"></AchievementBox>
        </MudItem>
        
    }
    else
    {
        <MudTextField @bind-Value="filterString" 
                    Placeholder="Filter"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                    Clearable="true"
                    DebounceInterval="800"></MudTextField>
        @foreach(var achievement in allAchievements)
        {
            if (!(SettingsService.HideCaughtFish && (achievement.Completed || achievement.Repeated > 0)))
            {
                <MudItem xs="12">
                    <AchievementBox Model="@achievement" Fishes="@(DataService.AllFishes.Where(fish => fish.AchievementIds.Contains(achievement.Id)).Select(fish => fish with {}).ToList())" ShowCaughtInformation="isApiKeySet" FilterFnOverride="FilterFunc"></AchievementBox>
                </MudItem>
            }
        }
    }
    </MudGrid>
}

@code {
    private string _achievementName;
    [Parameter]
    public string AchievementName { get; set; }

    private bool _loading = true;

    private Models.Achievement? selectedAchievement;
    private bool isApiKeySet;

    private List<Models.Achievement>? allAchievements;

    private Timer? promptApiKeyTimer;

    private string filterString;

    private bool FilterFunc(Models.Fish fish)
    {
        if (SettingsService.HideCaughtFish && fish.Caught)
            return false;

        if (string.IsNullOrWhiteSpace(filterString))
            return true;

        var filterWords = filterString.Split(" OR ");
        foreach(var filterWord in filterWords)
        {
            string processedFilterWord = filterWord;
            var searchPredicate = (string hay, string needle) => { return hay.Contains(needle, StringComparison.OrdinalIgnoreCase); };
            if (filterWord.ElementAt(0) == '+')
            {
                processedFilterWord = filterWord.Substring(1);
                searchPredicate = (string hay, string needle) => { return hay.Equals(needle, StringComparison.OrdinalIgnoreCase); };
            }
            if (searchPredicate(fish.Name, processedFilterWord))
                return true;
            if (fish.Area.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
            if (fish.Hole.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
            if (fish.Bait.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
            if (fish.Time.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
        }

        return false;
    }

    private async Task UpdateContent()
    {
        isApiKeySet = !string.IsNullOrEmpty(SettingsService.Gw2ApiKey);
        if (_achievementName != "")
        {
            selectedAchievement = DataService.AllAchievements.First(ach => ach.Name == _achievementName);
            allAchievements = null;
        }
        else
        {
            selectedAchievement = null;
            allAchievements = DataService.GetAllAchievementsInProgressOrder();
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await DataService.LoadAllData();
        DataService.ApiDataUpdated += ApiDataUpdated;

        if (SettingsService.Gw2ApiKey == "")
        {
            SendPromptForApiKey();
        }

        _loading = false;
    }

    private async Task SendPromptForApiKey()
    {
        if (Snackbar.ShownSnackbars.Count() > 0)
        {
            return;
        }
        
        await Task.Delay(5000);
        
        if (Snackbar.ShownSnackbars.Count() > 0)
        {
            return;
        }

        Snackbar.Add("You can add an API key in settings to track your progress", Severity.Info, config =>
        {
            config.Onclick = snackbar =>
            {
                NavManager.NavigateTo("/settings");
                return Task.CompletedTask;
            };
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        _achievementName = AchievementName ?? "";
        AchievementName = null;
        await UpdateContent();
        await base.OnParametersSetAsync();
    }

    private void ApiDataUpdated(object sender, EventArgs e) => UpdateContent();

}
