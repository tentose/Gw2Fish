@page "/settings"
@inject HttpClient Http
@inject ISettingsService SettingsService
@inject IDataService DataService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" Class="mt-8">
        <MudText Typo="Typo.h4" GutterBottom="true" Class="px-8">Settings</MudText>

        <MudPaper Class="mud-width-full py-8 px-8 my-4">
            <MudTextField T="string" Label="API Key" Class="mb-3" Validation="ValidateGw2ApiKey" @bind-Value="@_apiKeyText"/>
            <MudButton Variant="Variant.Filled" OnClick="ClearGw2ApiKey" Class="mb-8">Clear Stored API Key</MudButton>
            <p>Gw2Fish needs an API key that has access to
                <ul style="list-style: disc" class="px-8">
                    <li>account</li>
                    <li>progression</li>
                </ul>
            </p>
            <p>Don't have an API key? Get one here: <MudLink Href="https://account.arena.net/applications" Target="_blank">https://account.arena.net/applications</MudLink></p>
            <p>For more details, see the wiki: <MudLink Href="https://wiki.guildwars2.com/wiki/API:API_key" Target="_blank">https://wiki.guildwars2.com/wiki/API:API_key</MudLink></p>
        </MudPaper>

        <MudPaper Class="mud-width-full py-8 px-8 my-4 flex-column">
            <MudSwitch Color="Color.Primary" Class="ma-4" T="bool" Label="Hide Caught Fish" CheckedChanged="HideCaughtChecked" Checked="SettingsService.HideCaughtFish"/>
            <MudSwitch Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" CheckedChanged="DarkModeChecked" Checked="SettingsService.IsDarkMode"/>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string _apiKeyText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SettingsService.InitializeSettings();
            _apiKeyText = SettingsService.Gw2ApiKey;
            StateHasChanged();
        }
    }

    private void DarkModeChecked(bool isChecked)
    {
        SettingsService.SetDarkMode(isChecked);
    }

    private void HideCaughtChecked(bool isChecked)
    {
        SettingsService.SetHideCaughtFish(isChecked);
    }

    private async Task<string> ValidateGw2ApiKey(string key)
    {
        if (key == "")
        {
            return null;
        }

        var regex = new System.Text.RegularExpressions.Regex(@"^[0-9A-Z]{8}-[0-9A-Z]{4}-[0-9A-Z]{4}-[0-9A-Z]{4}-[0-9A-Z]{20}-[0-9A-Z]{4}-[0-9A-Z]{4}-[0-9A-Z]{4}-[0-9A-Z]{12}$");
        bool isMatch = regex.IsMatch(key);
        if (!isMatch)
        {
            return "Malformed key.";
        }

        try
        {
            var result = await Http.GetFromJsonAsync<Gw2Api.TokenInfo>("https://api.guildwars2.com/v2/tokeninfo?access_token=" + key);

            if (result == null)
            {
                return "Failed to validate API key with GW2 web API.";
            }

            if (!result.permissions.Contains("account"))
            {
                return "API key does not have the 'account' permission.";
            }

            if (!result.permissions.Contains("progression"))
            {
                return "API key does not have the 'progression' permission.";
            }
        }
        catch (Exception)
        {
            return "Failed to validate API key with GW2 web API.";
        }

        await SetGw2ApiKey(key);
        return null;
    }

    private async Task ClearGw2ApiKey()
    {
        _apiKeyText = "";
        await SetGw2ApiKey("");
    }

    private async Task SetGw2ApiKey(string key)
    {
        SettingsService.SetGw2ApiKey(key);
        await DataService.RefreshApiData();

        if (key == "")
        {
            Snackbar.Add("API key cleared.", Severity.Success);
        }
        else
        {
            Snackbar.Add("API key saved.", Severity.Success);
        }
    }
}
