@page "/"
@inject IDataService DataService
@using Models;

<PageTitle>All Fishes</PageTitle>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (_loading)
{
    <MudText Class="py-12 px-8">Loading ... </MudText>
}
else
{
<MudTable Hover="true" Breakpoint="Breakpoint.Xs" FixedHeader="true"
          Items="@DataService.AllFishes"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true"
          Filter="new Func<Fish,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Fish</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="filterString" Placeholder="Filter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Icon</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Hole</MudTh>
        <MudTh>Bait</MudTh>
        <MudTh>Time</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Icon"><MudImage Src="@string.Format("data:image/png;base64,{0}", context.Icon)" Class="@("rarity-" + context.Rarity.ToLower())"></MudImage></MudTd>
        <MudTd DataLabel="Name">
            <MudText>@context.Name</MudText>
        </MudTd>
        <MudTd DataLabel="Hole">
            <div class="d-flex">
                @foreach(var text in context.Hole)
                {
                    <MudText>@text</MudText>
                }
            </div>
        </MudTd>
        <MudTd DataLabel="Bait">
            <div class="">
                @foreach(var text in context.Bait)
                {
                    <MudText>@text</MudText>
                }
            </div>
        </MudTd>
        <MudTd DataLabel="Time">
            <div class="">
                @foreach(var text in context.Time)
                {
                    <MudText>@text</MudText>
                }
            </div>
        </MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Fish: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>
</MudTable>
}


@code {
    private bool _loading = true;

    private string filterString = "";

    protected override async Task OnInitializedAsync()
    {
        await DataService.LoadAppData();
        _loading = false;
    }

    private TableGroupDefinition<Fish> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        Selector = (e) => string.Join(',', e.Area)
    };

    private bool FilterFunc(Fish fish)
    {
        if (string.IsNullOrWhiteSpace(filterString))
            return true;
        var filterWords = filterString.Split(" OR ");
        foreach(var filterWord in filterWords)
        {
            string processedFilterWord = filterWord;
            var searchPredicate = (string hay, string needle) => { return hay.Contains(needle, StringComparison.OrdinalIgnoreCase); };
            if (filterWord.ElementAt(0) == '+')
            {
                processedFilterWord = filterWord.Substring(1);
                searchPredicate = (string hay, string needle) => { return hay.Equals(needle, StringComparison.OrdinalIgnoreCase); };
            }
            if (searchPredicate(fish.Name, processedFilterWord))
                return true;
            if (fish.Area.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
            if (fish.Hole.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
            if (fish.Bait.Any(x => searchPredicate(x, processedFilterWord)))
                return true;
        }

        return false;
    }

}
