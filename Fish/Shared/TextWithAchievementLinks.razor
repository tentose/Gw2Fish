@inject IDataService DataService

@if(_loading)
{
    <MudText Typo="@Typo" Class="@Class">@Content</MudText>
}
else
{
    <MudText Typo="@Typo" Class="@Class">
    @foreach(var fragment in parsedContent)
    {
        if (fragment.link != null)
        {
            <AchievementLink Typo="@Typo" Class="@Class" Location="@fragment.link" Text="@fragment.text"></AchievementLink>
        }
        else
        {
            @fragment.text
        }
    }
    </MudText>
}

@code {
    bool _loading = true;

    [Parameter]
    public Typo Typo { get; set; } = Typo.body1;

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    List<(string text, string? link)> parsedContent;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        await DataService.LoadAppData();

        var achievements = DataService.AllAchievements;
        IEnumerable<(string text, string link)> locations = achievements.Where(a => a.Name.EndsWith(" Fisher") && !a.Name.StartsWith("Avid ") && !a.Name.Contains("Desert Isles"))
                            .Select(a => a.Name.Substring(0, a.Name.IndexOf(" Fisher"))).Select(a => (a, a))
                            // sort desert isles first so that it gets processed before "Desert"
                            .Prepend(("Desert Isles", "Desert Isles"))
                            // some daily achievements have different text and link
                            .Append(("Kryta", "Krytan"))
                            .Append(("Ascalon", "Ascalonian"))
                            .Append(("Orr", "Orrian"));

        // not the most efficient algorithm. but not significant on the scale we're operating on
        parsedContent = new List<(string text, string? link)>();
        parsedContent.Add((Content ?? "", null));

        foreach (var location in locations)
        {
            for (int i = 0; i < parsedContent.Count; i++)
            {
                if (parsedContent[i].link != null)
                {
                    continue;
                }

                var text = parsedContent[i].text;
                var indexOf = text.IndexOf(location.text);
                if (indexOf > 0)
                {
                    var before = text.Substring(0, indexOf);
                    var after = text.Substring(indexOf + location.text.Length);
                    parsedContent.RemoveAt(i);
                    parsedContent.Insert(i, (after, null));
                    parsedContent.Insert(i, (location.text, location.link));
                    parsedContent.Insert(i, (before, null));
                }
            }
        }

        _loading = false;
        StateHasChanged();
    }
}
