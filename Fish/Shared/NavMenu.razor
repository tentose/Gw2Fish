@inject IDialogService DialogService
@inject IDataService DataService
@inject HttpClient Http

<MudNavMenu>
    <div class="d-flex">
    <MudImage Src="images/gw2fishexclaim.png" Alt="logo" Width="50" Fluid="true" ObjectFit="ObjectFit.Contain"></MudImage>
    <div class="d-flex-column">
    <MudText Typo="Typo.h6" Class="px-4 pt-4">GW2 Fish!</MudText>
    <MudText Typo="Typo.body2" Class="px-4 pb-4 mud-text-secondary">For your fishing needs</MudText>
    </div>
    </div>
    <MudDivider></MudDivider>
    <MudNavLink Href="/" Match="NavLinkMatch.All">All Fish</MudNavLink>
    <MudNavGroup Title="Achievements" @bind-Expanded="expandAchievementsMenu">
        <MudNavLink Href="/achievements" Match="NavLinkMatch.All" Icon="@Icons.Filled.ShowChart">Overview</MudNavLink>
        @if(DataService.AllAchievements != null)
        {
            @foreach(var achievement in DataService.AllAchievements)
            {
                <MudNavLink Href="@("/achievements/" + achievement.Name)" Icon="@(GetIconForAchievement(achievement))" IconColor="@(GetIconColorForAchievement(achievement))">@achievement.Name</MudNavLink>
            }
        }
        <MudNavLink Href="/achievements/all" Match="NavLinkMatch.All" Icon="@Icons.Filled.DensitySmall">All Achievements</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href="/settings" Match="NavLinkMatch.Prefix">Settings</MudNavLink>
    <MudNavLink Href="/about"  Match="NavLinkMatch.Prefix">About</MudNavLink>
</MudNavMenu>

@code {
    private bool expandAchievementsMenu = false;

    protected override async Task OnInitializedAsync()
    {
        await DataService.LoadAppData();
        DataService.ApiDataUpdated += (s, e) => StateHasChanged();

        // Intentionally background
        LoadApiData();
    }

    private void OpenSetAPIKeyDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };
        DialogService.Show<SetApiKey>("Set API Key", options);
    }

    private async Task LoadApiData()
    {
        await Task.Delay(200);
        await DataService.LoadAllData();
        StateHasChanged();
    }

    string[] AchievementIcons = new string[]
        {
            Icons.Filled.Filter1,
            Icons.Filled.Filter2,
            Icons.Filled.Filter3,
            Icons.Filled.Filter4,
            Icons.Filled.Filter5,
            Icons.Filled.Filter6,
            Icons.Filled.Filter7,
            Icons.Filled.Filter8,
            Icons.Filled.Filter9,
        };

    private string GetIconForAchievement(Models.Achievement a)
    {
        if (a.Completed || a.Repeated > 0)
            return Icons.Filled.Done;

        int left = a.PointRequirement - a.CurrentProgress;
        if (left > 0 && left <= 9)
            return AchievementIcons[left - 1];
        else
            return Icons.Filled.Filter9Plus;
    }

    private Color GetIconColorForAchievement(Models.Achievement a)
    {
        if (a.Completed || a.Repeated > 0)
            return Color.Default;

        return Color.Primary;
    }
}
